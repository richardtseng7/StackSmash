Webserver.c passes the variable len to strncopy in handle. The int type variable len is calculated in the handle function to be the difference 
in memory address between the start (“GET /”) and end (“ HTTP”) of the request string. However in check_filename_length, where len is compared 
to 100, the parameter len is of type byte. Therefore, a request string greater than 100 characters can still cause strncopy to be called. This 
vulnerability means that webserver.c is susceptible to buffer overflow at the buffer filename[100]. After finding the vulnerability in webserver.c, 
we wrote attackstr.c to generate the attack string. The structure of our attack string was: Return Address (“\xZZ\xZZ\xZZ\xZZ” repeated 50 times) → 
NOPs (“\x90” repeated 550 times) → Shell code. We used GDB to determine that the return address or $eip was located at an offset of 140 bytes from 
the memory address of the buffer, filename[0], on the stack. Using the suggested shell code for p2 linked on the course website, we first tested this 
exploit locally and once successful, ran it on to the remote web server. The large NOP slide in addition to being told that the return address would 
reside around 0xbfffd84 on Piazza allowed us to overwrite the remote return address very quickly and gain control.